plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.80'
//    id 'org.spongepowered.mixin' version '0.7.+'
}

group = mod_group_id
version = mod_version

repositories {
//    maven { url "https://maven.ryanliptak.com/" }
//    maven {
//        url "https://cursemaven.com"
//        content {
//            includeGroup "curse.maven"
//        }
//    }
//    maven { url "https://maven.merchantpug.net/releases" } // 起源-Forge
    mavenCentral()
}
base {
    archivesName = mod_id  + "-Forge" // 只是为了区分
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


//mixin {
//    add sourceSets.main, "classicandsimplestatusbars.refmap.json"
//    config 'classicandsimplestatusbars.mixin.json'
//    debug.verbose = true
//    debug.export = true
//}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    /* - 1.20.1 - - - - - - - - - - - - - - - -
    // 调试 HUD Mod
    //runtimeOnly fg.deobf("curse.maven:giacomos-hud-overlays-configurator-901833:4766472")
    // GeckoLib
    implementation fg.deobf("curse.maven:geckolib-388172:4711657") // geckolib-forge-1.20.1-4.2.2.jar
    // Curios API
    implementation fg.deobf("curse.maven:curios-309927:4738776") // curios-forge-5.3.1+1.20.1.jar
    // Caelus API
    implementation fg.deobf("curse.maven:caelus-308989:4581481") // caelus-forge-3.1.0+1.20.jar

    // 口渴 、 意志坚定
    compileOnly fg.deobf("curse.maven:thirst-was-taken-679270:4721665") // ThirstWasTaken-1.20.1-1.3.2.jar
    compileOnly fg.deobf("curse.maven:tough-as-nails-246391:4750298") // ToughAsNails-1.20.1-9.0.0.96.jar
    // 稳态
    implementation fg.deobf("curse.maven:homeostatic-634466:4738204") // homeostatic-1.20.1-2.9.5.0.jar
    // 生存要素 - 有冲突,暂不打算
//    implementation fg.deobf("curse.maven:survive-367337:4791291") // Survive-1.20.1-9.0.5.jar
//    implementation fg.deobf("curse.maven:unionlib-367806:4789434") // UnionLib-1.20.1-10.2.2-Forge.jar

    // 测试用.
    implementation fg.deobf("curse.maven:jei-238222:4712868")
    compileOnly fg.deobf("squeek.appleskin:appleskin-forge:mc1.20.1-2.5.0")
    compileOnly fg.deobf("squeek.appleskin:appleskin-forge:mc1.20.1-2.5.0:api")
    runtimeOnly fg.deobf("squeek.appleskin:appleskin-forge:mc1.20.1-2.5.0")
    implementation fg.deobf("curse.maven:jade-324717:4711195")

    // 奇异饰品
    implementation fg.deobf("curse.maven:expandability-465066:4630724") // expandability-9.0.0.jar
    implementation fg.deobf("curse.maven:architectury-api-419699:4663010") // Architectury API 9.1.12-forge.jar
    implementation fg.deobf("curse.maven:cloth-config-348521:4633444") // Cloth-Config-11.1.106-forge.jar
    implementation fg.deobf("curse.maven:artifacts-312353:4747012") // artifacts-forge-9.1.0.jar

    // 跑酷
    implementation fg.deobf("curse.maven:parcool-482378:4732321") // ParCool-1.20.1-3.1.0.3-R.jar

    // Feathers 羽毛耐力条-未更新


    // ScalingHealth-1.20.1-8.0.1+8.jar
    implementation fg.deobf("curse.maven:scaling-health-248027:4669277")
    // 前置 silent-lib-1.20.1-8.0.0.jar
    implementation fg.deobf("curse.maven:silent-lib-242998:4585754")

    // 吸血鬼 1.20.1-1.9.3.jar
    implementation fg.deobf("curse.maven:vampirism-become-a-vampire-233029:4799959")

    // 起源 origins-forge
//    jarJar('io.github.edwinmindcraft:apoli-forge:1.20.1-2.9.0.1') {
//        jarJar.ranged(it, '[1.20.1-2.9.0,)')
//    }
//    jarJar('io.github.edwinmindcraft:calio-forge:1.20.1-1.11.0.0') {
//        jarJar.ranged(it, '[1.20.1-1.11.0,)')
//    }
    implementation fg.deobf('io.github.edwinmindcraft:apoli-forge:1.20.1-2.9.0.1')
    implementation fg.deobf('io.github.edwinmindcraft:calio-forge:1.20.1-1.11.0.0')
    implementation fg.deobf("io.github.edwinmindcraft:origins-forge:1.20.1-1.10.0.1")

    // 过饱和，超级饱食度
    implementation fg.deobf("curse.maven:super-saturation-431906:4998350") */
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
            MixinConfigs        : "classicandsimplestatusbars.mixin.json",
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
